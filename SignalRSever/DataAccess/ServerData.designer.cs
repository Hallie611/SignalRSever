#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SignalRSever.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class ServerDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswerFillBlank(AnswerFillBlank instance);
    partial void UpdateAnswerFillBlank(AnswerFillBlank instance);
    partial void DeleteAnswerFillBlank(AnswerFillBlank instance);
    partial void InsertQuestionType(QuestionType instance);
    partial void UpdateQuestionType(QuestionType instance);
    partial void DeleteQuestionType(QuestionType instance);
    partial void InsertAnswerFindBug(AnswerFindBug instance);
    partial void UpdateAnswerFindBug(AnswerFindBug instance);
    partial void DeleteAnswerFindBug(AnswerFindBug instance);
    partial void InsertAnswerMultiChoice(AnswerMultiChoice instance);
    partial void UpdateAnswerMultiChoice(AnswerMultiChoice instance);
    partial void DeleteAnswerMultiChoice(AnswerMultiChoice instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertListAnswerMC(ListAnswerMC instance);
    partial void UpdateListAnswerMC(ListAnswerMC instance);
    partial void DeleteListAnswerMC(ListAnswerMC instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public ServerDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServerDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnswerFillBlank> AnswerFillBlanks
		{
			get
			{
				return this.GetTable<AnswerFillBlank>();
			}
		}
		
		public System.Data.Linq.Table<QuestionType> QuestionTypes
		{
			get
			{
				return this.GetTable<QuestionType>();
			}
		}
		
		public System.Data.Linq.Table<AnswerFindBug> AnswerFindBugs
		{
			get
			{
				return this.GetTable<AnswerFindBug>();
			}
		}
		
		public System.Data.Linq.Table<AnswerMultiChoice> AnswerMultiChoices
		{
			get
			{
				return this.GetTable<AnswerMultiChoice>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<ListAnswerMC> ListAnswerMCs
		{
			get
			{
				return this.GetTable<ListAnswerMC>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.correctQuestion")]
		public int correctQuestion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Player", DbType="NVarChar(50)")] string player, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), player, questionID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.wrongQuestion")]
		public int wrongQuestion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Player", DbType="NVarChar(50)")] string player, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), player, questionID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_all_player")]
		public ISingleResult<get_all_playerResult> get_all_player()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<get_all_playerResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_all_questions_history")]
		public ISingleResult<get_all_questions_historyResult> get_all_questions_history()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<get_all_questions_historyResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_fillBlank_byID")]
		public ISingleResult<get_fillBlank_byIDResult> get_fillBlank_byID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID);
			return ((ISingleResult<get_fillBlank_byIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_findbugs_byID")]
		public ISingleResult<get_findbugs_byIDResult> get_findbugs_byID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID);
			return ((ISingleResult<get_findbugs_byIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_mulichoice_byID")]
		public ISingleResult<get_mulichoice_byIDResult> get_mulichoice_byID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID);
			return ((ISingleResult<get_mulichoice_byIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_player_info")]
		public ISingleResult<get_player_infoResult> get_player_info([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<get_player_infoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_question_byID")]
		public ISingleResult<get_question_byIDResult> get_question_byID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID);
			return ((ISingleResult<get_question_byIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_question_type")]
		public ISingleResult<get_question_typeResult> get_question_type([global::System.Data.Linq.Mapping.ParameterAttribute(Name="QuestionID", DbType="Int")] System.Nullable<int> questionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID);
			return ((ISingleResult<get_question_typeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.inser_FindBugs")]
		public int inser_FindBugs([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> qid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string width, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string heigh, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string top, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string left)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, qid, width, heigh, top, left);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.inser_MultiChoice")]
		public int inser_MultiChoice([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> qid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AnsID", DbType="Int")] System.Nullable<int> ansID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, qid, ansID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insert_fillBlanks")]
		public int insert_fillBlanks([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> qID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> index, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string listAns, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string answ)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, qID, index, listAns, answ);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Insert_Player")]
		public int Insert_Player([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insert_question")]
		public int insert_question([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> dif, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string src)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, type, dif, src);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.question_report_by_name")]
		public ISingleResult<question_report_by_nameResult> question_report_by_name([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<question_report_by_nameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Random_question_by_dif")]
		public ISingleResult<Random_question_by_difResult> Random_question_by_dif([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> dif)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dif);
			return ((ISingleResult<Random_question_by_difResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.update_player_info")]
		public int update_player_info([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Level", DbType="Int")] System.Nullable<int> level, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Point", DbType="Int")] System.Nullable<int> point)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, level, point);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.update_point")]
		public int update_point([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Win", DbType="NVarChar(50)")] string win, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WinPoint", DbType="Int")] System.Nullable<int> winPoint, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Loser", DbType="NVarChar(50)")] string loser, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LosePoint", DbType="Int")] System.Nullable<int> losePoint)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), win, winPoint, loser, losePoint);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_games_by_Name")]
		public ISingleResult<get_games_by_NameResult> get_games_by_Name([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string player_name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), player_name);
			return ((ISingleResult<get_games_by_NameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_player_name")]
		public ISingleResult<get_player_nameResult> get_player_name([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> playerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), playerID);
			return ((ISingleResult<get_player_nameResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerFillBlanks")]
	public partial class AnswerFillBlank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _QuestionID;
		
		private System.Nullable<int> _AnswerIndex;
		
		private string _ListAnswers;
		
		private string _CorrectAnswer;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(System.Nullable<int> value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerIndexChanging(System.Nullable<int> value);
    partial void OnAnswerIndexChanged();
    partial void OnListAnswersChanging(string value);
    partial void OnListAnswersChanged();
    partial void OnCorrectAnswerChanging(string value);
    partial void OnCorrectAnswerChanged();
    #endregion
		
		public AnswerFillBlank()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int")]
		public System.Nullable<int> QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerIndex", DbType="Int")]
		public System.Nullable<int> AnswerIndex
		{
			get
			{
				return this._AnswerIndex;
			}
			set
			{
				if ((this._AnswerIndex != value))
				{
					this.OnAnswerIndexChanging(value);
					this.SendPropertyChanging();
					this._AnswerIndex = value;
					this.SendPropertyChanged("AnswerIndex");
					this.OnAnswerIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListAnswers", DbType="NVarChar(100)")]
		public string ListAnswers
		{
			get
			{
				return this._ListAnswers;
			}
			set
			{
				if ((this._ListAnswers != value))
				{
					this.OnListAnswersChanging(value);
					this.SendPropertyChanging();
					this._ListAnswers = value;
					this.SendPropertyChanged("ListAnswers");
					this.OnListAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectAnswer", DbType="NVarChar(50)")]
		public string CorrectAnswer
		{
			get
			{
				return this._CorrectAnswer;
			}
			set
			{
				if ((this._CorrectAnswer != value))
				{
					this.OnCorrectAnswerChanging(value);
					this.SendPropertyChanging();
					this._CorrectAnswer = value;
					this.SendPropertyChanged("CorrectAnswer");
					this.OnCorrectAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerFillBlank", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.AnswerFillBlanks.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.AnswerFillBlanks.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionType")]
	public partial class QuestionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _Type;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public QuestionType()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_Questions", ThisKey="TypeID", OtherKey="Type")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerFindBugs")]
	public partial class AnswerFindBug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _QuestionID;
		
		private string _WidthPoint;
		
		private string _HeightPoint;
		
		private string _TopPoint;
		
		private string _LeftPoint;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(System.Nullable<int> value);
    partial void OnQuestionIDChanged();
    partial void OnWidthPointChanging(string value);
    partial void OnWidthPointChanged();
    partial void OnHeightPointChanging(string value);
    partial void OnHeightPointChanged();
    partial void OnTopPointChanging(string value);
    partial void OnTopPointChanged();
    partial void OnLeftPointChanging(string value);
    partial void OnLeftPointChanged();
    #endregion
		
		public AnswerFindBug()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int")]
		public System.Nullable<int> QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WidthPoint", DbType="NChar(10)")]
		public string WidthPoint
		{
			get
			{
				return this._WidthPoint;
			}
			set
			{
				if ((this._WidthPoint != value))
				{
					this.OnWidthPointChanging(value);
					this.SendPropertyChanging();
					this._WidthPoint = value;
					this.SendPropertyChanged("WidthPoint");
					this.OnWidthPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightPoint", DbType="NChar(10)")]
		public string HeightPoint
		{
			get
			{
				return this._HeightPoint;
			}
			set
			{
				if ((this._HeightPoint != value))
				{
					this.OnHeightPointChanging(value);
					this.SendPropertyChanging();
					this._HeightPoint = value;
					this.SendPropertyChanged("HeightPoint");
					this.OnHeightPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopPoint", DbType="NChar(10)")]
		public string TopPoint
		{
			get
			{
				return this._TopPoint;
			}
			set
			{
				if ((this._TopPoint != value))
				{
					this.OnTopPointChanging(value);
					this.SendPropertyChanging();
					this._TopPoint = value;
					this.SendPropertyChanged("TopPoint");
					this.OnTopPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftPoint", DbType="NChar(10)")]
		public string LeftPoint
		{
			get
			{
				return this._LeftPoint;
			}
			set
			{
				if ((this._LeftPoint != value))
				{
					this.OnLeftPointChanging(value);
					this.SendPropertyChanging();
					this._LeftPoint = value;
					this.SendPropertyChanged("LeftPoint");
					this.OnLeftPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerFindBug", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.AnswerFindBugs.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.AnswerFindBugs.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerMultiChoices")]
	public partial class AnswerMultiChoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _QuestionID;
		
		private System.Nullable<int> _AnswerID;
		
		private EntityRef<ListAnswerMC> _ListAnswerMC;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(System.Nullable<int> value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerIDChanging(System.Nullable<int> value);
    partial void OnAnswerIDChanged();
    #endregion
		
		public AnswerMultiChoice()
		{
			this._ListAnswerMC = default(EntityRef<ListAnswerMC>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int")]
		public System.Nullable<int> QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerID", DbType="Int")]
		public System.Nullable<int> AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					if (this._ListAnswerMC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListAnswerMC_AnswerMultiChoice", Storage="_ListAnswerMC", ThisKey="AnswerID", OtherKey="AnswerID", IsForeignKey=true)]
		public ListAnswerMC ListAnswerMC
		{
			get
			{
				return this._ListAnswerMC.Entity;
			}
			set
			{
				ListAnswerMC previousValue = this._ListAnswerMC.Entity;
				if (((previousValue != value) 
							|| (this._ListAnswerMC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListAnswerMC.Entity = null;
						previousValue.AnswerMultiChoices.Remove(this);
					}
					this._ListAnswerMC.Entity = value;
					if ((value != null))
					{
						value.AnswerMultiChoices.Add(this);
						this._AnswerID = value.AnswerID;
					}
					else
					{
						this._AnswerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ListAnswerMC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerMultiChoice", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.AnswerMultiChoices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.AnswerMultiChoices.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private System.Nullable<int> _WinerID;
		
		private System.Nullable<int> _LoserID;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Player> _Player1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnWinerIDChanging(System.Nullable<int> value);
    partial void OnWinerIDChanged();
    partial void OnLoserIDChanging(System.Nullable<int> value);
    partial void OnLoserIDChanged();
    #endregion
		
		public Game()
		{
			this._Player = default(EntityRef<Player>);
			this._Player1 = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinerID", DbType="Int")]
		public System.Nullable<int> WinerID
		{
			get
			{
				return this._WinerID;
			}
			set
			{
				if ((this._WinerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinerIDChanging(value);
					this.SendPropertyChanging();
					this._WinerID = value;
					this.SendPropertyChanged("WinerID");
					this.OnWinerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoserID", DbType="Int")]
		public System.Nullable<int> LoserID
		{
			get
			{
				return this._LoserID;
			}
			set
			{
				if ((this._LoserID != value))
				{
					if (this._Player1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoserIDChanging(value);
					this.SendPropertyChanging();
					this._LoserID = value;
					this.SendPropertyChanged("LoserID");
					this.OnLoserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Player", ThisKey="WinerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._WinerID = value.PlayerID;
					}
					else
					{
						this._WinerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Player1", ThisKey="LoserID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player1
		{
			get
			{
				return this._Player1.Entity;
			}
			set
			{
				Player previousValue = this._Player1.Entity;
				if (((previousValue != value) 
							|| (this._Player1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player1.Entity = null;
						previousValue.Games1.Remove(this);
					}
					this._Player1.Entity = value;
					if ((value != null))
					{
						value.Games1.Add(this);
						this._LoserID = value.PlayerID;
					}
					else
					{
						this._LoserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Histories")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _QuestionID;
		
		private System.Nullable<int> _Rright;
		
		private System.Nullable<int> _Wrong;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnRrightChanging(System.Nullable<int> value);
    partial void OnRrightChanged();
    partial void OnWrongChanging(System.Nullable<int> value);
    partial void OnWrongChanged();
    #endregion
		
		public History()
		{
			this._Player = default(EntityRef<Player>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rright", DbType="Int")]
		public System.Nullable<int> Rright
		{
			get
			{
				return this._Rright;
			}
			set
			{
				if ((this._Rright != value))
				{
					this.OnRrightChanging(value);
					this.SendPropertyChanging();
					this._Rright = value;
					this.SendPropertyChanged("Rright");
					this.OnRrightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wrong", DbType="Int")]
		public System.Nullable<int> Wrong
		{
			get
			{
				return this._Wrong;
			}
			set
			{
				if ((this._Wrong != value))
				{
					this.OnWrongChanging(value);
					this.SendPropertyChanging();
					this._Wrong = value;
					this.SendPropertyChanged("Wrong");
					this.OnWrongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_History", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_History", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListAnswerMC")]
	public partial class ListAnswerMC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerID;
		
		private string _Answer;
		
		private string _Description;
		
		private EntitySet<AnswerMultiChoice> _AnswerMultiChoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIDChanging(int value);
    partial void OnAnswerIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ListAnswerMC()
		{
			this._AnswerMultiChoices = new EntitySet<AnswerMultiChoice>(new Action<AnswerMultiChoice>(this.attach_AnswerMultiChoices), new Action<AnswerMultiChoice>(this.detach_AnswerMultiChoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(50)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListAnswerMC_AnswerMultiChoice", Storage="_AnswerMultiChoices", ThisKey="AnswerID", OtherKey="AnswerID")]
		public EntitySet<AnswerMultiChoice> AnswerMultiChoices
		{
			get
			{
				return this._AnswerMultiChoices;
			}
			set
			{
				this._AnswerMultiChoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerMultiChoices(AnswerMultiChoice entity)
		{
			this.SendPropertyChanging();
			entity.ListAnswerMC = this;
		}
		
		private void detach_AnswerMultiChoices(AnswerMultiChoice entity)
		{
			this.SendPropertyChanging();
			entity.ListAnswerMC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _PlayerName;
		
		private System.Nullable<int> _PlayerLevel;
		
		private System.Nullable<int> _PlayerPoint;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Game> _Games1;
		
		private EntitySet<History> _Histories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnPlayerLevelChanging(System.Nullable<int> value);
    partial void OnPlayerLevelChanged();
    partial void OnPlayerPointChanging(System.Nullable<int> value);
    partial void OnPlayerPointChanged();
    partial void OnWinChanging(System.Nullable<int> value);
    partial void OnWinChanged();
    partial void OnLoseChanging(System.Nullable<int> value);
    partial void OnLoseChanged();
    #endregion
		
		public Player()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerLevel", DbType="Int")]
		public System.Nullable<int> PlayerLevel
		{
			get
			{
				return this._PlayerLevel;
			}
			set
			{
				if ((this._PlayerLevel != value))
				{
					this.OnPlayerLevelChanging(value);
					this.SendPropertyChanging();
					this._PlayerLevel = value;
					this.SendPropertyChanged("PlayerLevel");
					this.OnPlayerLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPoint", DbType="Int")]
		public System.Nullable<int> PlayerPoint
		{
			get
			{
				return this._PlayerPoint;
			}
			set
			{
				if ((this._PlayerPoint != value))
				{
					this.OnPlayerPointChanging(value);
					this.SendPropertyChanging();
					this._PlayerPoint = value;
					this.SendPropertyChanged("PlayerPoint");
					this.OnPlayerPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this.OnLoseChanging(value);
					this.SendPropertyChanging();
					this._Lose = value;
					this.SendPropertyChanged("Lose");
					this.OnLoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Games", ThisKey="PlayerID", OtherKey="WinerID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Games1", ThisKey="PlayerID", OtherKey="LoserID")]
		public EntitySet<Game> Games1
		{
			get
			{
				return this._Games1;
			}
			set
			{
				this._Games1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_History", Storage="_Histories", ThisKey="PlayerID", OtherKey="PlayerID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = this;
		}
		
		private void detach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private string _SRC;
		
		private EntitySet<AnswerFillBlank> _AnswerFillBlanks;
		
		private EntitySet<AnswerFindBug> _AnswerFindBugs;
		
		private EntitySet<AnswerMultiChoice> _AnswerMultiChoices;
		
		private EntitySet<History> _Histories;
		
		private EntityRef<QuestionType> _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnQuestionDifChanging(System.Nullable<int> value);
    partial void OnQuestionDifChanged();
    partial void OnSRCChanging(string value);
    partial void OnSRCChanged();
    #endregion
		
		public Question()
		{
			this._AnswerFillBlanks = new EntitySet<AnswerFillBlank>(new Action<AnswerFillBlank>(this.attach_AnswerFillBlanks), new Action<AnswerFillBlank>(this.detach_AnswerFillBlanks));
			this._AnswerFindBugs = new EntitySet<AnswerFindBug>(new Action<AnswerFindBug>(this.attach_AnswerFindBugs), new Action<AnswerFindBug>(this.detach_AnswerFindBugs));
			this._AnswerMultiChoices = new EntitySet<AnswerMultiChoice>(new Action<AnswerMultiChoice>(this.attach_AnswerMultiChoices), new Action<AnswerMultiChoice>(this.detach_AnswerMultiChoices));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._QuestionType = default(EntityRef<QuestionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this.OnQuestionDifChanging(value);
					this.SendPropertyChanging();
					this._QuestionDif = value;
					this.SendPropertyChanged("QuestionDif");
					this.OnQuestionDifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRC", DbType="NVarChar(50)")]
		public string SRC
		{
			get
			{
				return this._SRC;
			}
			set
			{
				if ((this._SRC != value))
				{
					this.OnSRCChanging(value);
					this.SendPropertyChanging();
					this._SRC = value;
					this.SendPropertyChanged("SRC");
					this.OnSRCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerFillBlank", Storage="_AnswerFillBlanks", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<AnswerFillBlank> AnswerFillBlanks
		{
			get
			{
				return this._AnswerFillBlanks;
			}
			set
			{
				this._AnswerFillBlanks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerFindBug", Storage="_AnswerFindBugs", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<AnswerFindBug> AnswerFindBugs
		{
			get
			{
				return this._AnswerFindBugs;
			}
			set
			{
				this._AnswerFindBugs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerMultiChoice", Storage="_AnswerMultiChoices", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<AnswerMultiChoice> AnswerMultiChoices
		{
			get
			{
				return this._AnswerMultiChoices;
			}
			set
			{
				this._AnswerMultiChoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_History", Storage="_Histories", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_QuestionType", ThisKey="Type", OtherKey="TypeID", IsForeignKey=true)]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._Type = value.TypeID;
					}
					else
					{
						this._Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerFillBlanks(AnswerFillBlank entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_AnswerFillBlanks(AnswerFillBlank entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_AnswerFindBugs(AnswerFindBug entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_AnswerFindBugs(AnswerFindBug entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_AnswerMultiChoices(AnswerMultiChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_AnswerMultiChoices(AnswerMultiChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	public partial class get_all_playerResult
	{
		
		private int _PlayerID;
		
		private string _PlayerName;
		
		private System.Nullable<int> _PlayerLevel;
		
		private System.Nullable<int> _PlayerPoint;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		public get_all_playerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this._PlayerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this._PlayerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerLevel", DbType="Int")]
		public System.Nullable<int> PlayerLevel
		{
			get
			{
				return this._PlayerLevel;
			}
			set
			{
				if ((this._PlayerLevel != value))
				{
					this._PlayerLevel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPoint", DbType="Int")]
		public System.Nullable<int> PlayerPoint
		{
			get
			{
				return this._PlayerPoint;
			}
			set
			{
				if ((this._PlayerPoint != value))
				{
					this._PlayerPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this._Win = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this._Lose = value;
				}
			}
		}
	}
	
	public partial class get_all_questions_historyResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private System.Nullable<int> _Correct;
		
		private System.Nullable<int> _Wrong;
		
		public get_all_questions_historyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this._QuestionDif = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Int")]
		public System.Nullable<int> Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this._Correct = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wrong", DbType="Int")]
		public System.Nullable<int> Wrong
		{
			get
			{
				return this._Wrong;
			}
			set
			{
				if ((this._Wrong != value))
				{
					this._Wrong = value;
				}
			}
		}
	}
	
	public partial class get_fillBlank_byIDResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private string _SRC;
		
		private System.Nullable<int> _AnswerIndex;
		
		private string _ListAnswers;
		
		private string _CorrectAnswer;
		
		public get_fillBlank_byIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this._QuestionDif = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRC", DbType="NVarChar(50)")]
		public string SRC
		{
			get
			{
				return this._SRC;
			}
			set
			{
				if ((this._SRC != value))
				{
					this._SRC = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerIndex", DbType="Int")]
		public System.Nullable<int> AnswerIndex
		{
			get
			{
				return this._AnswerIndex;
			}
			set
			{
				if ((this._AnswerIndex != value))
				{
					this._AnswerIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListAnswers", DbType="NVarChar(100)")]
		public string ListAnswers
		{
			get
			{
				return this._ListAnswers;
			}
			set
			{
				if ((this._ListAnswers != value))
				{
					this._ListAnswers = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectAnswer", DbType="NVarChar(50)")]
		public string CorrectAnswer
		{
			get
			{
				return this._CorrectAnswer;
			}
			set
			{
				if ((this._CorrectAnswer != value))
				{
					this._CorrectAnswer = value;
				}
			}
		}
	}
	
	public partial class get_findbugs_byIDResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private string _SRC;
		
		private string _WidthPoint;
		
		private string _HeightPoint;
		
		private string _TopPoint;
		
		private string _LeftPoint;
		
		public get_findbugs_byIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this._QuestionDif = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRC", DbType="NVarChar(50)")]
		public string SRC
		{
			get
			{
				return this._SRC;
			}
			set
			{
				if ((this._SRC != value))
				{
					this._SRC = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WidthPoint", DbType="NChar(10)")]
		public string WidthPoint
		{
			get
			{
				return this._WidthPoint;
			}
			set
			{
				if ((this._WidthPoint != value))
				{
					this._WidthPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightPoint", DbType="NChar(10)")]
		public string HeightPoint
		{
			get
			{
				return this._HeightPoint;
			}
			set
			{
				if ((this._HeightPoint != value))
				{
					this._HeightPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopPoint", DbType="NChar(10)")]
		public string TopPoint
		{
			get
			{
				return this._TopPoint;
			}
			set
			{
				if ((this._TopPoint != value))
				{
					this._TopPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftPoint", DbType="NChar(10)")]
		public string LeftPoint
		{
			get
			{
				return this._LeftPoint;
			}
			set
			{
				if ((this._LeftPoint != value))
				{
					this._LeftPoint = value;
				}
			}
		}
	}
	
	public partial class get_mulichoice_byIDResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private string _SRC;
		
		private string _Answer;
		
		public get_mulichoice_byIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this._QuestionDif = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRC", DbType="NVarChar(50)")]
		public string SRC
		{
			get
			{
				return this._SRC;
			}
			set
			{
				if ((this._SRC != value))
				{
					this._SRC = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(50)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this._Answer = value;
				}
			}
		}
	}
	
	public partial class get_player_infoResult
	{
		
		private int _PlayerID;
		
		private string _PlayerName;
		
		private System.Nullable<int> _PlayerLevel;
		
		private System.Nullable<int> _PlayerPoint;
		
		private System.Nullable<int> _Win;
		
		private System.Nullable<int> _Lose;
		
		public get_player_infoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this._PlayerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this._PlayerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerLevel", DbType="Int")]
		public System.Nullable<int> PlayerLevel
		{
			get
			{
				return this._PlayerLevel;
			}
			set
			{
				if ((this._PlayerLevel != value))
				{
					this._PlayerLevel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPoint", DbType="Int")]
		public System.Nullable<int> PlayerPoint
		{
			get
			{
				return this._PlayerPoint;
			}
			set
			{
				if ((this._PlayerPoint != value))
				{
					this._PlayerPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int")]
		public System.Nullable<int> Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this._Win = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lose", DbType="Int")]
		public System.Nullable<int> Lose
		{
			get
			{
				return this._Lose;
			}
			set
			{
				if ((this._Lose != value))
				{
					this._Lose = value;
				}
			}
		}
	}
	
	public partial class get_question_byIDResult
	{
		
		private int _QuestionID;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<int> _QuestionDif;
		
		private string _SRC;
		
		private string _WidthPoint;
		
		private string _HeightPoint;
		
		private string _TopPoint;
		
		private string _LeftPoint;
		
		public get_question_byIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDif", DbType="Int")]
		public System.Nullable<int> QuestionDif
		{
			get
			{
				return this._QuestionDif;
			}
			set
			{
				if ((this._QuestionDif != value))
				{
					this._QuestionDif = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SRC", DbType="NVarChar(50)")]
		public string SRC
		{
			get
			{
				return this._SRC;
			}
			set
			{
				if ((this._SRC != value))
				{
					this._SRC = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WidthPoint", DbType="NChar(10)")]
		public string WidthPoint
		{
			get
			{
				return this._WidthPoint;
			}
			set
			{
				if ((this._WidthPoint != value))
				{
					this._WidthPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightPoint", DbType="NChar(10)")]
		public string HeightPoint
		{
			get
			{
				return this._HeightPoint;
			}
			set
			{
				if ((this._HeightPoint != value))
				{
					this._HeightPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopPoint", DbType="NChar(10)")]
		public string TopPoint
		{
			get
			{
				return this._TopPoint;
			}
			set
			{
				if ((this._TopPoint != value))
				{
					this._TopPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftPoint", DbType="NChar(10)")]
		public string LeftPoint
		{
			get
			{
				return this._LeftPoint;
			}
			set
			{
				if ((this._LeftPoint != value))
				{
					this._LeftPoint = value;
				}
			}
		}
	}
	
	public partial class get_question_typeResult
	{
		
		private string _Type;
		
		public get_question_typeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	public partial class question_report_by_nameResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		private System.Nullable<int> _Rright;
		
		private System.Nullable<int> _Wrong;
		
		public question_report_by_nameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rright", DbType="Int")]
		public System.Nullable<int> Rright
		{
			get
			{
				return this._Rright;
			}
			set
			{
				if ((this._Rright != value))
				{
					this._Rright = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wrong", DbType="Int")]
		public System.Nullable<int> Wrong
		{
			get
			{
				return this._Wrong;
			}
			set
			{
				if ((this._Wrong != value))
				{
					this._Wrong = value;
				}
			}
		}
	}
	
	public partial class Random_question_by_difResult
	{
		
		private int _QuestionID;
		
		private string _Type;
		
		public Random_question_by_difResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	public partial class get_games_by_NameResult
	{
		
		private int _GameID;
		
		private System.Nullable<int> _WinerID;
		
		private System.Nullable<int> _LoserID;
		
		public get_games_by_NameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinerID", DbType="Int")]
		public System.Nullable<int> WinerID
		{
			get
			{
				return this._WinerID;
			}
			set
			{
				if ((this._WinerID != value))
				{
					this._WinerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoserID", DbType="Int")]
		public System.Nullable<int> LoserID
		{
			get
			{
				return this._LoserID;
			}
			set
			{
				if ((this._LoserID != value))
				{
					this._LoserID = value;
				}
			}
		}
	}
	
	public partial class get_player_nameResult
	{
		
		private string _PlayerName;
		
		public get_player_nameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this._PlayerName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
